function Color(value){Object.defineProperty(this, 'blue',{enumerable: true, get: getB, set: setB, writeable: true}); Object.defineProperty(this, 'canDarken',{enumerable: true, get: function canDarken(){return this.luminance > 0;}}); Object.defineProperty(this, 'canLighten',{enumerable: true, get: function canLighten(){return this.luminance < 100;}}); Object.defineProperty(this, 'green',{enumerable: true, get: getG, set: setG, writeable: true}); Object.defineProperty(this, 'hcolor',{enumerable: true, get: getHColor, set: setHColor, writeable: true}); Object.defineProperty(this, 'hue',{enumerable: true, get: getH, set: setH, writeable: true}); Object.defineProperty(this, 'lightness',{enumerable: true, get: getL, set: setL, writeable: true}); Object.defineProperty(this, 'luminance',{enumerable: true, get: getLuminance}); Object.defineProperty(this, 'opacity',{enumerable: true, get: getAlpha, set: setAlpha, writeable: true}); Object.defineProperty(this, 'red',{enumerable: true, get: getR, set: setR, writeable: true}); Object.defineProperty(this, 'saturation',{enumerable: true, get: getS, set: setS, writeable: true}); this.darken = function darken(degree){var color = this.toString() || '#000000', n = parseInt(color.replace(/^#/, ''), 16), R = Math.max(0, (n >> 16) - (degree || 1)), G = Math.max(0, (n & 0x0000FF) - (degree || 1)), B = Math.max(0, ((n >> 8) & 0x00FF) - (degree || 1)), h = (G | (B << 8) | (R << 16)).toString(16), o = convertHColorToRgb(`000000${h}`.substr(-6)); r = o.red; g = o.green; b = o.blue; convertRgbToHsl(); return this;}; this.lighten = function lighten(degree){var color = this.toString() || '#ffffff', n = parseInt(color.replace(/^#/, ''), 16), R = Math.min((n >> 16) + (degree || 1), 255), G = Math.min((n & 0x0000FF) + (degree || 1), 255), B = Math.min(((n >> 8) & 0x00FF) + (degree || 1), 255), h = (G | (B << 8) | (R << 16)).toString(16), o = convertHColorToRgb(`000000${h}`.substr(-6)); r = o.red; g = o.green; b = o.blue; convertRgbToHsl(); return this;}; this.isColorType = function isColorType(data){if (data){return isHexadecimal(data) || isHSL(data) || isRGB(data);}return false;}; this.toString = function toString(){return this.hcolor;}; function getAlpha(){return typeof a !== 'number' ? 1 : round(a);}function setAlpha(n){var fp; if (typeof n === 'string' && /%/.test(n)){fp = Number(n.replace(/%/g, '')) / 100;}else if (typeof n === 'string' && /^0|[a-f]/i.test(n)){fp = parseInt(n, 16) / 255;}else{fp = Number(n);}if (!Number.isNaN(fp)){a = round(Math.floor(fp) > 0 ? fp / 100 : fp);}}function getB(){return b;}function setB(n){if (typeof n === 'string' && /[a-f]/i.test(n)){b = strToNum(n);}else{b = Number(n);}convertRgbToHsl();}function getG(){return g;}function setG(n){if (typeof n === 'string' && /[a-f]/i.test(n)){g = strToNum(n);}else{g = Number(n);}convertRgbToHsl();}function getH(){return h;}function setH(n){h = Number(n); h += (h < 360) ? 360 : 0; h %= 360; convertHslToRgb();}function getHColor(){function hex(n){return `0${n.toString(16)}`.substr(-2);}if (isSet(this.red) && isSet(this.green) && isSet(this.blue)){if (this.opacity < 1){return `#${hex(this.red)}${hex(this.green)}${hex(this.blue)}${hex(Math.floor(this.opacity * 255))}`;}return `#${hex(this.red)}${hex(this.green)}${hex(this.blue)}`;}let udef; return udef;}function setHColor(n){var rgb = convertHColorToRgb(n); if (isSet(rgb.red) && isSet(rgb.green) && isSet(rgb.blue)){r = rgb.red; g = rgb.green; b = rgb.blue; a = rgb.opacity; convertRgbToHsl();}}function getL(){if (typeof l === 'number'){return `${Math.round(l * 100)}%`;}}function setL(n){if (typeof n === 'string'){l = strToNum(n);}else{l = Number(n);}convertHslToRgb();}function getLuminance(){function range(dec){var n = dec / 255; return n < 0.03928 ? n / 12.92 : Math.pow((n + 0.055) / 1.055, 2.4);}if (isSet(r) && isSet(g) && isSet(b)){return (0.2126 * range(r) + 0.7152 * range(g) + 0.0722 * range(b)) * 100;}}function getR(){return r;}function setR(n){if (typeof n === 'string' && /[a-f]/i.test(n)){r = strToNum(n);}else{r = Number(n);}convertRgbToHsl();}function getS(){if (typeof s === 'number'){return `${Math.round(s * 100)}%`;}}function setS(n){if (typeof n === 'string'){s = strToNum(n);}else{s = Number(n);}convertHslToRgb();}function convertHColorToRgb(color){var h3 = HEX3.exec(color), h4 = HEX4.exec(color), h6 = HEX6.exec(color), h8 = HEX8.exec(color), matchS = (h6 || h3), matchL = (h8 || h4), R, G, B, A; if (matchS){R = parseInt((matchS[1] + matchS[1]).substr(-2), 16); G = parseInt((matchS[2] + matchS[2]).substr(-2), 16); B = parseInt((matchS[3] + matchS[3]).substr(-2), 16); A = 1;}else if (matchL){R = parseInt((matchL[1] + matchL[1]).substr(-2), 16); G = parseInt((matchL[2] + matchL[2]).substr(-2), 16); B = parseInt((matchL[3] + matchL[3]).substr(-2), 16); A = parseInt((matchL[4] + matchL[4]).substr(-2), 16) / 255;}return{blue: B, green: G, red: R, opacity: A};}function convertHslToRgb(){var C, hPrime, X, m, rgbPrime; if (s === 0){r = l * 255; g = l * 255; b = l * 255;}else if (typeof h === 'number' && typeof s === 'number' && typeof l === 'number'){C = (1 - Math.abs(l * 2 - 1)) * s; hPrime = h / 60; X = C * (1 - Math.abs((hPrime % 2) - 1)); m = l - C / 2; rgbPrime = [ [C, X, 0], [X, C, 0], [0, C, X], [0, X, C], [X, 0, C], [C, 0, X] ][Math.floor(hPrime) % 6]; r = Math.round((rgbPrime[0] + m) * 255); g = Math.round((rgbPrime[1] + m) * 255); b = Math.round((rgbPrime[2] + m) * 255);}}function convertRgbToHsl(){var R, G, B, MAX, MIN, L, S, H = 60; if (isSet(r) && isSet(g) && isSet(b)){R = round(r / 255); G = round(g / 255); B = round(b / 255); MAX = Math.max(R, G, B); MIN = Math.min(R, G, B); L = (MAX + MIN) / 2; S = (MAX === MIN) ? 0 : L < 0.5 ? (MAX - MIN) / (MAX + MIN) : (MAX - MIN) / (2.0 - MAX - MIN); if (R === MAX){H *= ((G - B) / (MAX - MIN));}else if (G === MAX){H *= (2.0 + (B - R) / (MAX - MIN));}else{H *= (4.0 + (R - G) / (MAX - MIN));}H += H < 0 ? 360 : 0; h = Math.round(H); s = Math.round(S * 100) / 100; l = Math.round(L * 100) / 100;}}function isHexadecimal(v){var isHex = HEX3.test(v) || HEX4.test(v) || HEX6.test(v) || HEX8.test(v); return typeof v === 'string' && isHex;}function isHSL(v){return v && isSet(v.hue) && isSet(v.saturation) && isSet(v.lightness);}function isRGB(v){return v && isSet(v.red) && isSet(v.green) && isSet(v.blue);}function isSet(v){return !Number.isNaN(v) && typeof v !== 'undefined';}function round(n){return Number(n.toFixed(2));}function strToNum(n){if (typeof n === 'string' || typeof n === 'number'){if (/%$/.test(n)){return parseFloat(n.replace(/%$/, '')) / 100;}else if (/^[0-9a-f]+$/i.test(n)){return parseInt(n, 16);}return parseFloat(n);}}function normalize(data){return isRGB(data) ? data : convertHColorToRgb(data);}function init(color){var rgb = normalize(color); if (color){r = rgb.red; g = rgb.green; b = rgb.blue; h = parseInt(color.hue, 10); s = strToNum(color.saturation); l = strToNum(color.lightness); a = rgb.opacity || strToNum(color.opacity); h += h < 0 ? 360 : 0; if (isSet(r) && isSet(g) && isSet(b)){convertRgbToHsl();}else if (isSet(h) && isSet(s) && isSet(l)){convertHslToRgb();}}}var HEX3 = /^#?([0-9a-f]{1})([0-9a-f]{1})([0-9a-f]{1})$/i, HEX6 = /^#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i, HEX4 = /^#?([0-9a-f]{1})([0-9a-f]{1})([0-9a-f]{1})([0-9a-f]{1})$/i, HEX8 = /^#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i, r, g, b, h, s, l, a; init(value);};function Luminance(foreground, background){Object.defineProperty(this, 'background',{enumerable: true, get: getBg, set: setBg, writeable: true}); Object.defineProperty(this, 'contrast',{enumerable: true, get: getContrast}); Object.defineProperty(this, 'foreground',{enumerable: true, get: getFg, set: setFg, writeable: true}); this.matrix = function matrix(){var table ={}, colors ={}, palette = [].slice.call(arguments) .map(function splitter(arg){if (typeof arg === 'string' && arg.indexOf(',')){return arg.split(',');}return arg instanceof Array ? arg : [arg];}) .reduce(function combine(value, total){return total.concat(value);}, []) .map(function toColor(hex){var isColor = hex instanceof Color, color = isColor ? hex : new Color(hex.trim()); return color;}) .filter(function filterNotColor(el){return typeof el.hue === 'number';}) .sort(function byHue(a, b){return a.hue - b.hue;}) .map(function toHex(el){var hcolor = el.hcolor; if (hcolor){hcolor = hcolor.replace(/\W/g, ''); colors[hcolor] = el;}return hcolor;}); palette.forEach(function buildTable(h){var values ={}; palette.forEach(function addContrast(p){values[p] = contrast(colors[h], colors[p]);}); table[h] = values;}); return table;}; this.reset = function reset(){this.foreground = initFg; this.background = initBg; return this;}; this.search = function search(level, isolate){var b = this.background, f = this.foreground; if (this.foreground.luminance < this.background.luminance){this.foreground.adjust = this.foreground.darken; this.foreground.adjustProperty = 'canDarken'; this.background.adjust = this.background.lighten; this.background.adjustProperty = 'canLighten';}else{this.foreground.adjust = this.foreground.lighten; this.foreground.adjustProperty = 'canLighten'; this.background.adjust = this.background.darken; this.background.adjustProperty = 'canDarken';}if (isolate){while (isolate[isolate.adjustProperty] && !this.test(level)){isolate.adjust();}}else{while ((b[b.adjustProperty] || f[f.adjustProperty]) && !this.test(level)){if (b[b.adjustProperty]){b.adjust();}if (f[f.adjustProperty]){f.adjust();}}}return this;}; this.test = function test(level){return !(this.contrast < level);}; function getBg(){return bg;}function setBg(color){bg = color instanceof Color ? color : new Color(color); initBg = initBg || new Color(color);}function getContrast(){if (fg && bg){return contrast(fg, bg);}}function getFg(){return fg;}function setFg(color){fg = color instanceof Color ? color : new Color(color); initFg = initFg || new Color(color);}function isColorType(data){var c = new Color(); return c.isColorType(data);}function contrast(fColor, bColor){var f, b, n; if (new Color().isColorType(fColor) && new Color().isColorType(bColor)){f = new Color({red: ((1 - fColor.opacity) * bColor.red) + (fColor.opacity * fColor.red), green: ((1 - fColor.opacity) * bColor.green) + (fColor.opacity * fColor.green), blue: ((1 - fColor.opacity) * bColor.blue) + (fColor.opacity * fColor.blue)}).luminance + 5; b = bColor.luminance + 5; n = f / b; n = f < b ? 1 / n : n; return n.toFixed(2);}}var bg, fg, initBg, initFg; if (foreground && foreground.background){this.background = foreground.background;}else if (isColorType(background)){this.background = background;}if (foreground && foreground.foreground){this.foreground = foreground.foreground;}else if (isColorType(foreground)){this.foreground = foreground;}};
